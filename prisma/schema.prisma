generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXTAUTH_DATABASE_URL")
}

model users {
  id              Int            @id @default(autoincrement())
  username        String         @db.VarChar(50)
  email           String         @unique @db.VarChar(20)
  password        String
  company_name    String?
  phone_number    String?
  address         String?
  role            String?
  drawing2Dfiles  Drawing_2D[]
  drawing3Dfiles  Drawing_3D[]
  drawingBOQfiles Drawing_BOQ[]
  kanbanCards     Kanban_Cards[]
}

model Drawing_2D {
  id           Int           @id @default(autoincrement())
  filename     String
  fileUrl      String
  version      Int
  createdAt    DateTime      @default(now())
  userId       Int
  user         users         @relation(fields: [userId], references: [id])
  markerGroups MarkerGroup[]
}

model Drawing_3D {
  id        Int      @id @default(autoincrement())
  filename  String
  fileUrl   String
  version   Int
  createdAt DateTime @default(now())
  userId    Int
  user      users    @relation(fields: [userId], references: [id])
  // markerGroups MarkerGroup[]
}

model Drawing_BOQ {
  id        Int      @id @default(autoincrement())
  filename  String
  fileUrl   String
  version   Int
  createdAt DateTime @default(now())
  userId    Int
  user      users    @relation(fields: [userId], references: [id])
  // markerGroups MarkerGroup[]
}

model Marker {
  id            Int         @id @default(autoincrement())
  top           Float
  left          Float
  comment       String
  user          String
  userId        Int
  markerGroupId Int
  markerGroup   MarkerGroup @relation(fields: [markerGroupId], references: [id])
}

model MarkerGroup {
  id          Int         @id @default(autoincrement())
  markers     Marker[]
  drawing2DId Int?
  drawing2D   Drawing_2D? @relation(fields: [drawing2DId], references: [id])
}

// drawing3DId  Int?
// drawingBOQId Int?
// drawing3D    Drawing_3D?  @relation(fields: [drawing3DId], references: [id])
// drawingBOQ   Drawing_BOQ? @relation(fields: [drawingBOQId], references: [id])

model accessControl {
  id       Int    @id @default(autoincrement())
  username String @db.VarChar(50)
  email    String @unique @db.VarChar(20)
  password String
  role     String @default("employee")
}

model Kanban_Cards {
  id     Int    @id @default(autoincrement())
  column String
  title  String
  userId Int
  user   users  @relation(fields: [userId], references: [id])
}

// model Marker {
//   id        Int      @id @default(autoincrement())
//   top       Float
//   left      Float
//   comment   String
//   userId    Int
//   user      users    @relation(fields: [userId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
